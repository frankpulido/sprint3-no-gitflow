<?php
declare(strict_types=1);
require_once "task_kind.class.php";
require_once "task_status.class.php";
//require_once "programmer.class.php";
//require_once "project.class.php";

final class Task {
    //private static int $id_count = 0;
    protected int $id_task;
    protected int $project_id;
    protected int $programmer_id; // When a task is created it must have a programmer assigned, then this attribute can be changed.
    protected TaskKind $task_kind; // Ojo, el JSON schema debe forzar un ENUM TaskKind
    protected TaskStatus $task_status; // Ojo, el JSON schema debe forzar un ENUM TaskStatus
    protected string $task_description;
    protected DateTimeImmutable $dateCreated;
    protected ?DateTime $dateInit = null;
    protected ?DateTime $dateDelivered = null; // If not approved this attribute may be overwritten later when delivered for second time.
    protected ?DateTime $dateApproved = null;

    public function __construct(int $project_id, int $programmer_id, TaskKind $task_kind, string $task_description) {
        //self::$id_count++;
        //$this->id_task = self::$id_count;
        //$id_task will be generated by TaskManager class
        $this->project_id = $project_id;
        $this->programmer_id = $programmer_id;
        $this->task_kind = $task_kind;
        $this->task_status = TaskStatus::PIPELINED;
        $this->task_description = $task_description;
        $this->dateCreated = new DateTimeImmutable();
        //$this->dateInit = $dateInit;
        //$this->dateDelivered = $dateDeivered;
        //$this->dateApproved = NULL;
    }
    
    // Getters

    public function getIdTask() : int {
        return $this->id_task;
    }

    public function getProjectId() : int {
        return $this->project_id;
    }

    public function getProgrammerId() : int {
        return $this->programmer_id;
    }

    public function getTaskKind() : TaskKind {
        return $this->task_kind;
    }

    public function getTaskStatus() : TaskStatus {
        return $this->task_status;
    }

    public function getTaskDescription() : string {
        return $this->task_description;
    }

    public function getDateCreated() : DateTimeImmutable {
        return $this->dateCreated;
    }
    
    public function getDateInit() : DateTime {
        return $this->dateInit;
    }
    
    public function getDateDelivered() : DateTime {
        return $this->dateDelivered;
    }
    
    public function getDateApproved() : DateTime {
        return $this->dateApproved;
    }
    
    // Setters

    public function setIdTask($id_task) : void {
        $this->id_task = $id_task;
    }

    public function setProjectId(int $project_id) : void {
        $this->project_id = $project_id;
    }

    public function setProgrammerId(int $programmer_id) : void {
        $this->programmer_id = $programmer_id;
    }

    public function setTaskKind(TaskKind $task_kind) : void {
        $this->task_kind = $task_kind;
    }

    public function setTaskStatus(TaskStatus $task_status) : void {
        $this->task_status = $task_status;
    }

    public function setTaskDescription(string $task_description) : void {
        $this->task_description = $task_description;
    }

    public function setDateCreated(DateTimeImmutable $dateCreated) : void { // Cannot be NULL
        $this->dateCreated = $dateCreated;
    }
    
    public function setDateInit(DateTime $dateInit) : void {
        $this->dateInit = $dateInit;
        $this->task_status = TaskStatus::INIT;
    }
    
    public function setDateDelivered(DateTime $dateDelivered) : void {
        $this->dateInit = $dateDelivered;
        $this->task_status = TaskStatus::DELIVERED;
    }
    
    public function setDateApproved(DateTime $dateApproved) : void {
        $this->dateInit = $dateApproved;
        $this->task_status = TaskStatus::RELEASED;
    }

    // Serialize object to push it into the json persistence file

    public function toArray(): array {
        return [
            'id_task' => $this->id_task,
            'project_id' => $this->project_id,
            'programmer_id' => $this->programmer_id,
            'task_kind' => $this->task_kind->name,
            'task_status' => $this->task_status->name,
            'task_description' => $this->task_description,
            'dateCreated' => $this->dateCreated->format(DateTime::ATOM),
            'dateInit' => $this->dateInit ? $this->dateInit->format(DateTime::ATOM) : null,
            'dateDelivered' => $this->dateDelivered ? $this->dateDelivered->format(DateTime::ATOM) : null,
            'dateApproved' => $this->dateApproved ? $this->dateApproved->format(DateTime::ATOM) : null,
        ];
    }

    /*
    public function getByProgrammerId($programmer_id) : array {

    }

    public function getByProjectId($project_id) : array {

    }
    */



    // CREATING A TASK
    /*
    $task = new Task($projectId, $programmerId, 'FRONTOFFICE', 'INIT', 'Task description here.');
    $taskData = $task->toArray();
    $jsonData = json_encode($taskData, JSON_PRETTY_PRINT);
    file_put_contents('tasks.json', $jsonData);
    */
}

?>